//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class OnButtonPressedWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(OnButtonPressed), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("OnPointerDown", OnPointerDown);
		L.RegFunction("OnPointerUp", OnPointerUp);
		L.RegFunction("OnPointerExit", OnPointerExit);
		L.RegFunction("OnPointerEnter", OnPointerEnter);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("EventOnPointerDown", get_EventOnPointerDown, set_EventOnPointerDown);
		L.RegVar("EventOnPointerUp", get_EventOnPointerUp, set_EventOnPointerUp);
		L.RegVar("EventOnPointerExit", get_EventOnPointerExit, set_EventOnPointerExit);
		L.RegVar("EventOnPointerEnter", get_EventOnPointerEnter, set_EventOnPointerEnter);
		L.RegFunction("PointerEvent", OnButtonPressed_PointerEvent);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerDown(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			OnButtonPressed obj = (OnButtonPressed)ToLua.CheckObject<OnButtonPressed>(L, 1);
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject<UnityEngine.EventSystems.PointerEventData>(L, 2);
			obj.OnPointerDown(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerUp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			OnButtonPressed obj = (OnButtonPressed)ToLua.CheckObject<OnButtonPressed>(L, 1);
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject<UnityEngine.EventSystems.PointerEventData>(L, 2);
			obj.OnPointerUp(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerExit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			OnButtonPressed obj = (OnButtonPressed)ToLua.CheckObject<OnButtonPressed>(L, 1);
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject<UnityEngine.EventSystems.PointerEventData>(L, 2);
			obj.OnPointerExit(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerEnter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			OnButtonPressed obj = (OnButtonPressed)ToLua.CheckObject<OnButtonPressed>(L, 1);
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject<UnityEngine.EventSystems.PointerEventData>(L, 2);
			obj.OnPointerEnter(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EventOnPointerDown(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(OnButtonPressed.PointerEvent)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EventOnPointerUp(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(OnButtonPressed.PointerEvent)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EventOnPointerExit(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(OnButtonPressed.PointerEvent)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EventOnPointerEnter(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(OnButtonPressed.PointerEvent)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EventOnPointerDown(IntPtr L)
	{
		try
		{
			OnButtonPressed obj = (OnButtonPressed)ToLua.CheckObject(L, 1, typeof(OnButtonPressed));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'OnButtonPressed.EventOnPointerDown' can only appear on the left hand side of += or -= when used outside of the type 'OnButtonPressed'");
			}

			if (arg0.op == EventOp.Add)
			{
				OnButtonPressed.PointerEvent ev = (OnButtonPressed.PointerEvent)arg0.func;
				obj.EventOnPointerDown += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				OnButtonPressed.PointerEvent ev = (OnButtonPressed.PointerEvent)arg0.func;
				obj.EventOnPointerDown -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EventOnPointerUp(IntPtr L)
	{
		try
		{
			OnButtonPressed obj = (OnButtonPressed)ToLua.CheckObject(L, 1, typeof(OnButtonPressed));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'OnButtonPressed.EventOnPointerUp' can only appear on the left hand side of += or -= when used outside of the type 'OnButtonPressed'");
			}

			if (arg0.op == EventOp.Add)
			{
				OnButtonPressed.PointerEvent ev = (OnButtonPressed.PointerEvent)arg0.func;
				obj.EventOnPointerUp += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				OnButtonPressed.PointerEvent ev = (OnButtonPressed.PointerEvent)arg0.func;
				obj.EventOnPointerUp -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EventOnPointerExit(IntPtr L)
	{
		try
		{
			OnButtonPressed obj = (OnButtonPressed)ToLua.CheckObject(L, 1, typeof(OnButtonPressed));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'OnButtonPressed.EventOnPointerExit' can only appear on the left hand side of += or -= when used outside of the type 'OnButtonPressed'");
			}

			if (arg0.op == EventOp.Add)
			{
				OnButtonPressed.PointerEvent ev = (OnButtonPressed.PointerEvent)arg0.func;
				obj.EventOnPointerExit += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				OnButtonPressed.PointerEvent ev = (OnButtonPressed.PointerEvent)arg0.func;
				obj.EventOnPointerExit -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EventOnPointerEnter(IntPtr L)
	{
		try
		{
			OnButtonPressed obj = (OnButtonPressed)ToLua.CheckObject(L, 1, typeof(OnButtonPressed));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'OnButtonPressed.EventOnPointerEnter' can only appear on the left hand side of += or -= when used outside of the type 'OnButtonPressed'");
			}

			if (arg0.op == EventOp.Add)
			{
				OnButtonPressed.PointerEvent ev = (OnButtonPressed.PointerEvent)arg0.func;
				obj.EventOnPointerEnter += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				OnButtonPressed.PointerEvent ev = (OnButtonPressed.PointerEvent)arg0.func;
				obj.EventOnPointerEnter -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnButtonPressed_PointerEvent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<OnButtonPressed.PointerEvent>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<OnButtonPressed.PointerEvent>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

