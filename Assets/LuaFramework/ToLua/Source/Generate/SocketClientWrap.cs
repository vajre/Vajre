//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SocketClientWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SocketClient), typeof(System.Object));
		L.RegFunction("OnRegister", OnRegister);
		L.RegFunction("OnRemove", OnRemove);
		L.RegFunction("Connected", Connected);
		L.RegFunction("SendHearbeat", SendHearbeat);
		L.RegFunction("Close", Close);
		L.RegFunction("Connect", Connect);
		L.RegFunction("SendMessage", SendMessage);
		L.RegFunction("New", _CreateSocketClient);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegConstant("CMD_HEADER_SIZE", 9);
		L.RegVar("OnMessage", get_OnMessage, set_OnMessage);
		L.RegVar("OnEvent", get_OnEvent, set_OnEvent);
		L.RegFunction("MessageHandler", SocketClient_MessageHandler);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSocketClient(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				SocketClient obj = new SocketClient();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: SocketClient.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnRegister(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SocketClient obj = (SocketClient)ToLua.CheckObject<SocketClient>(L, 1);
			obj.OnRegister();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnRemove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SocketClient obj = (SocketClient)ToLua.CheckObject<SocketClient>(L, 1);
			obj.OnRemove();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connected(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SocketClient obj = (SocketClient)ToLua.CheckObject<SocketClient>(L, 1);
			bool o = obj.Connected();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendHearbeat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SocketClient obj = (SocketClient)ToLua.CheckObject<SocketClient>(L, 1);
			obj.SendHearbeat();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SocketClient obj = (SocketClient)ToLua.CheckObject<SocketClient>(L, 1);
			obj.Close();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SocketClient obj = (SocketClient)ToLua.CheckObject<SocketClient>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.Connect(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendMessage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			SocketClient obj = (SocketClient)ToLua.CheckObject<SocketClient>(L, 1);
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			byte arg1 = (byte)LuaDLL.luaL_checknumber(L, 3);
			uint arg2 = (uint)LuaDLL.luaL_checknumber(L, 4);
			byte[] arg3 = ToLua.CheckByteBuffer(L, 5);
			obj.SendMessage(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnMessage(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(SocketClient.MessageHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnEvent(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(SocketClient.MessageHandler)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnMessage(IntPtr L)
	{
		try
		{
			SocketClient obj = (SocketClient)ToLua.CheckObject(L, 1, typeof(SocketClient));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SocketClient.OnMessage' can only appear on the left hand side of += or -= when used outside of the type 'SocketClient'");
			}

			if (arg0.op == EventOp.Add)
			{
				SocketClient.MessageHandler ev = (SocketClient.MessageHandler)arg0.func;
				obj.OnMessage += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				SocketClient.MessageHandler ev = (SocketClient.MessageHandler)arg0.func;
				obj.OnMessage -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnEvent(IntPtr L)
	{
		try
		{
			SocketClient obj = (SocketClient)ToLua.CheckObject(L, 1, typeof(SocketClient));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'SocketClient.OnEvent' can only appear on the left hand side of += or -= when used outside of the type 'SocketClient'");
			}

			if (arg0.op == EventOp.Add)
			{
				SocketClient.MessageHandler ev = (SocketClient.MessageHandler)arg0.func;
				obj.OnEvent += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				SocketClient.MessageHandler ev = (SocketClient.MessageHandler)arg0.func;
				obj.OnEvent -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SocketClient_MessageHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<SocketClient.MessageHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<SocketClient.MessageHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

